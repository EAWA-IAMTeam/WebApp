import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:kclogin/home/config.dart';
import 'package:kclogin/home/controllers/auth_controller.dart';
import 'package:kclogin/home/model/user_model.dart';

class CreateUserViewModel extends ChangeNotifier {
  final AuthController authController = AuthController();
  final TextEditingController firstNameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  List<Map<String, dynamic>> storeList = [];

  bool isFormValid() {
    return firstNameController.text.isNotEmpty &&
        lastNameController.text.isNotEmpty &&
        emailController.text.isNotEmpty &&
        storeList.isNotEmpty;
  }

  Future<void> createUser(BuildContext context) async {
    if (!isFormValid()) return;

    final token = await authController.getClientAccessToken();
    if (token == null) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error: Token is null")));
      return;
    }

    UserModel user = UserModel(
      username: emailController.text,
      firstName: firstNameController.text,
      lastName: lastNameController.text,
      email: emailController.text,
      storeList: storeList,
    );

    final response = await http.post(
      Uri.parse("${Config.server}:8080/admin/realms/G-SSO-Connect/users"),
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
      body: jsonEncode(user.toJson()),
    );

    if (response.statusCode == 201) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("User created successfully!")));
      Navigator.pop(context);
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error: ${response.body}")));
    }
  }

  void addStore(String id, String name, String role, String permissions) {
    storeList.add({
      "store_id": id,
      "store_name": name,
      "store_role": role,
      "store_permission": permissions,
    });
    notifyListeners();
  }
}
